#!/usr/bin/env node
const creatrDapp = require(".//lib/CreateDapp");
const fs = require("fs");
const clear = require('clear');
const chalk = require('chalk');
const figlet = require('figlet');
clear();
console.log('\n');
console.log(
  chalk.yellow(
    figlet.textSync('KAIZEN', { horizontalLayout: 'fitted' })
  )
);
const argv = require('yargs')
.usage('Kaizen v0.0.1 - a dapp framework for Blockchain\n\nUsage: $0 <command> [options]')
.command('dapp', 'create a dapp', (yargs) => {
  return yargs
    .option('name', {
      alias: 'n',
      describe: 'clone a file'
    })
    .option('type', {
      alias: 't',
      describe: 'f2e framework type vue or react',
      choices: ['vue', 'react'],
      default: 'vue'
    })
    .demandOption(['name'], 'Please enter your project name')
    .example(
      'kaizen dapp -n <package name> -t <vue or react>',
      'git clone boilerplate'
    )
}, (argv) => {
    const { name, type } = argv;
    creatrDapp({ name, type });
  }
)
.command('config', 'environment variables of dapps')
.command('build', 'scripts used to pack dapp')
.command('publish', 'scripts used to publish dapp')
.demandCommand(1, 'You need at least one command before moving on')
.options({
  'c': {
    alias: 'config',
    describe: 'setting config',
  },
  'r': {
    alias: 'run',
    describe: 'run your program',
  },
  'p': {
    alias: 'path',
    describe: 'provide a path to file',
  },
  's': {
    alias: 'spec',
    describe: 'program specifications'
  },
  'v': {
    alias: 'version',
    describe: 'that displays the version number '
  },
  'h': {
    alias: 'help',
    describe: 'that displays the version number '
  }
})
.config('c', (configPath)=> {
    return JSON.parse(fs.readFileSync(configPath, 'utf-8'))
})
.help('h')
.epilog('copyright Portal Network 2018')
.argv;